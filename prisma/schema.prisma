generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresOn DateTime @default(now())
    expired   Boolean  @default(false)
    type      String
    createdAt DateTime @default(now())

    // @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    userName      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    lists         List[]
}

model List {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    games       Game[]
    Owner       User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Game {
    id        String @id
    gameId    String
    name      String
    cover_url String
    score     Int
    list      List   @relation(fields: [listId], references: [id])
    listId    String
    review    String

    @@unique([name, listId])
}
